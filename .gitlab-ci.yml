image: docker:24-cli
services:
  - docker:24-dind

include:
  - template: Jobs/SAST.gitlab-ci.yml

variables:
  DOCKER_TLS_CERTDIR: ""

workflow:
  rules:
    - if: $GITLAB_USER_NAME == "git_push_token"
      when: never
    - when: always

stages:
  - test
  - update-version
  - build
  - release
  - deploy
  - rollback

update-version:
  stage: update-version
  image: alpine:latest
  before_script:
    - apk update
    - apk add git
    - apk add npm
    - apk add jq
    - git config --global user.name "Gitlab CI"
    - git config --global user.email "ci@gitlab.com"
    - git checkout main
    - git reset --hard 44afd0a4bd601715eabbcd672162c748f039c275
    - git tag | xargs git tag -d
    - git pull --rebase
  script:
    - export PACKAGE_VERSION=$(cat package.json | jq -r '.version')
    - export NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F'.' '{print $1"."$2"."$3+1}' | sed s/[.]$//)
    - npm version $NEW_VERSION
    - cat $PROJECT_ENVIRONMENT_VARIABLES > ./src/environments/environment.prod.ts
    - sed -ri "s|$(echo $PACKAGE_VERSION)|$(echo $NEW_VERSION)|g" helm/values.yaml
    - git add .
    - git commit -m "Update version to $NEW_VERSION"
    - git push "https://gitlab-ci-token:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - echo "TAG=$NEW_VERSION" >> build.env
    - echo "OLD_VERSION=$PACKAGE_VERSION" >> build.env
    - echo "GIT_SHA=$(git rev-parse HEAD)" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - if: $GITLAB_USER_EMAIL == "ci@gitlab.com"
      when: never

docker-build:
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$TAG
  script:
    - docker login -u $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG . -f Dockerfile
    - docker push $IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - if: $GITLAB_USER_EMAIL == "ci@gitlab.com"
      when: never

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - if: $GITLAB_USER_EMAIL == "ci@gitlab.com"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$TAG'                # The version is incremented per pipeline.
    description: '$TAG'
    ref: '$GIT_SHA'                         # The tag is created from the pipeline SHA.

deploy-job:
  stage: deploy
  environment: production
  image: alpine:latest
  before_script:
    - apk update
    - apk add git
    - git config --global user.name "Gitlab CI"
    - git config --global user.email "ci@gitlab.com"
    - git clone "https://gitlab-ci-token:$HEMIRON_APPS_ACCESS_TOKEN@$CI_SERVER_HOST/2223.ipsenh-p3/hemiron-apps.git"
  script:
    - cd hemiron-apps
    - sed -ri "s|$(echo $OLD_VERSION)|$(echo $TAG)|g" appsets/frontend/hemiron-frontend.yaml
    - echo "Deploying application..."
    - git add .
    - git commit -m "Update version to $TAG"
    - git push "https://gitlab-ci-token:$HEMIRON_APPS_ACCESS_TOKEN@$CI_SERVER_HOST/2223.ipsenh-p3/hemiron-apps.git"
    - echo "Application successfully deployed."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - if: $GITLAB_USER_EMAIL == "ci@gitlab.com"
      when: never

rollback-version:
  stage: rollback
  image: alpine:latest
  before_script:
    - apk update
    - apk add git
    - apk add npm
    - apk add jq
    - git config --global user.name "Gitlab CI"
    - git config --global user.email "ci@gitlab.com"
    - git checkout main
    - git reset --hard e67941e3bc504deb44c0d7947ed38252bcc054dd
    - git tag | xargs git tag -d
    - git pull --rebase
  script:
    - export PACKAGE_VERSION=$(cat package.json | jq -r '.version')
    - export NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F'.' '{print $1"."$2"."$3-1}' | sed s/[.]$//)
    - npm version $NEW_VERSION
    - sed -ri "s|$(echo $PACKAGE_VERSION)|$(echo $NEW_VERSION)|g" helm/values.yaml
    - git add .
    - git commit -m "Update version to $NEW_VERSION"
    - git push "https://gitlab-ci-token:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_failure
    - if: $GITLAB_USER_EMAIL == "ci@gitlab.com"
      when: never
